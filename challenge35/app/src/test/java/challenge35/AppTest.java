/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge35;

import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    public void addNodeTest(){

        Graph graph = new Graph();

        Node<String> node1 = graph.addNode("John");
        Node<String> node2 = graph.addNode("Sara");
        Node<String> node3 = graph.addNode("Michel");

        assertEquals("[{John}, {Sara}, {Michel}]",graph.getNode().toString());
        assertEquals(3,graph.getSize());
    }

    @Test
    public void addEdgeTest(){

        Graph graph = new Graph();
        Node<String> node1 = graph.addNode("John");
        Node<String> node2 = graph.addNode("Sara");
        graph.addEdge(node1, node2);
        assertEquals("[{Sara}, {John}]", graph.getNode().toString());
        assertEquals(2, graph.getSize());
    }

    @Test
    public void getNeighborsTest(){

        Graph graph = new Graph();

        Node<String> node1 = graph.addNode("John");
        Node<String> node2 = graph.addNode("Sara");
        Node<String> node3 = graph.addNode("Michel");
        graph.addEdge(node1, node2);
        graph.addEdge(node2, node3);
        graph.addEdge(node3, node1);

        assertEquals("[{Sara}]",graph.getNeighbors(node1).toString());
        assertEquals("[{John}]",graph.getNeighbors(node3).toString());

    }

    @Test
    public void emptyGraph(){

        Graph graph = new Graph();
        assertEquals(0,graph.getSize());
        assertEquals("[]", graph.getNode().toString());
    }

    @Test
    void addEdgeWithWeightTest() {
        Graph<String> graph = new Graph();
        Node<String> node1 = graph.addNode("Tia");
        Node<String> node2 = graph.addNode("Wess");
        graph.addEdge(node1, node2, 100.0);

        assertEquals(100.0, graph.nodes.get(node1).get(node2));
    }

    // challenge 36

    @Test
    void breadthFirstTest() {
        Graph<String> graph = new Graph<>();
        Node<String> node1 = graph.addNode("A");
        Node<String> node2 = graph.addNode("B");
        Node<String> node3 = graph.addNode("C");
        Node<String> node4 = graph.addNode("D");
        Node<String> node5 = graph.addNode("E");
        Node<String> node6 = graph.addNode("F");

        graph.addEdge(node1, node2);
        graph.addEdge(node2, node3);
        graph.addEdge(node3, node4);
        graph.addEdge(node4, node5);
        graph.addEdge(node5, node6);
        graph.addEdge(node6, node5);

        assertEquals("[{A}, {B}, {C}, {D}, {E}, {F}]", graph.breadthFirst(node1).toString());
        assertEquals("[{B}, {C}, {D}, {E}, {F}]", graph.breadthFirst(node2).toString());
        assertEquals("[{F}, {E}]", graph.breadthFirst(node6).toString());
    }


    // Challenge 37

    @Test
    public void testBusinessTrip() {
        Graph<String> graph = new Graph<>();
        Node<String> Pandora = graph.addNode("Pandora");
        Node<String> Arendelle = graph.addNode("Arendelle");
        Node<String> Metroville = graph.addNode("Metroville");
        Node<String> Monstroplolis = graph.addNode("Monstroplolis");
        Node<String> Narnia = graph.addNode("Narnia");
        Node<String> Naboo = graph.addNode("Naboo");

        graph.addEdge(Pandora, Arendelle, 150.0);
        graph.addEdge(Arendelle, Metroville, 99.0);
        graph.addEdge(Arendelle, Monstroplolis, 42.0);
        graph.addEdge(Metroville, Narnia, 37.0);
        graph.addEdge(Metroville, Pandora, 82.0);
        graph.addEdge(Metroville, Naboo, 26.0);
        graph.addEdge(Monstroplolis, Metroville, 105.0);
        graph.addEdge(Monstroplolis, Naboo, 73.0);
        graph.addEdge(Naboo, Narnia, 250.0);

        List<Node<String>> cities1 = Arrays.asList(Metroville, Pandora);
        List<Node<String>> cities2 = Arrays.asList(Arendelle, Monstroplolis, Naboo);
        List<Node<String>> cities3 = Arrays.asList(Naboo, Pandora);
        List<Node<String>> cities4 = Arrays.asList(Narnia, Arendelle, Naboo);

        assertEquals("true, $82.0", graph.businessTrip(graph, cities1));
        assertEquals("true, $115.0", graph.businessTrip(graph, cities2));
        assertEquals("false, $0.0", graph.businessTrip(graph, cities3));
        assertEquals("false, $0.0", graph.businessTrip(graph, cities4));
    }


    // Code challenge 38
    @Test
    void firstDepth() {
        Graph<String> graph = new Graph<>();
        Node<String> nodeA = graph.addNode("A");
        Node<String> nodeB = graph.addNode("B");
        Node<String> nodeC = graph.addNode("C");
        Node<String> nodeD = graph.addNode("D");
        Node<String> nodeE = graph.addNode("E");
        Node<String> nodeF = graph.addNode("F");
        Node<String> nodeG = graph.addNode("G");
        Node<String> nodeH = graph.addNode("H");

        graph.addEdge(nodeA, nodeB);
        graph.addEdge(nodeA, nodeD);
        graph.addEdge(nodeB, nodeD);
        graph.addEdge(nodeB, nodeC);
        graph.addEdge(nodeC, nodeG);
        graph.addEdge(nodeD, nodeE);
        graph.addEdge(nodeD, nodeH);
        graph.addEdge(nodeD, nodeF);
        graph.addEdge(nodeH, nodeF);

        assertEquals("[A, B, C, G, D, F, H, E]", graph.depthFirst(nodeA).toString());
    }
}
