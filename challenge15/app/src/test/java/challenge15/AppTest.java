/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge15;

import org.junit.Test;
import static org.junit.Assert.*;

public class AppTest {
    @Test public void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }

    public void emptyTreeTest(){
        BinaryTree binaryTree = new BinaryTree();

        assertTrue(binaryTree.isEmpty());
    }


    @Test
    public void singleRootTreeTest(){
        BinarySearchTree binaryTree = new BinarySearchTree();
        binaryTree.add(5);
        assertFalse( binaryTree.isEmpty() );
    }

    @Test
    public void addLeftChildToSingleRootTreeTest(){
        BinarySearchTree binaryTree = new BinarySearchTree();
        binaryTree.add(12);
        binaryTree.root.setLeftNode(new BinaryNode(9));
        assertEquals(12,binaryTree.root.getData());
        assertEquals(9,binaryTree.root.getLeftNode().getData());

    }
    @Test
    public void addRightChildToSingleRootTreeTest(){
        BinarySearchTree binaryTree = new BinarySearchTree();
        binaryTree.add(10);
        binaryTree.root.setRightNode(new BinaryNode(20));
        assertEquals(10,binaryTree.root.getData());
        assertEquals(20,binaryTree.root.getRightNode().getData());

    }
    @Test
    public void preOrderTest(){
        BinarySearchTree binaryTree = new BinarySearchTree();
        binaryTree.add(7);
        binaryTree.add(9);
        binaryTree.add(11);
        binaryTree.add(13);
        binaryTree.add(1);
        binaryTree.preorderTraversal();
        assertEquals("[7, 1, 9, 11, 13]",binaryTree.preOrderList.toString());

    }

    @Test
    public void inorderTest(){
        BinarySearchTree binaryTree = new BinarySearchTree();
        binaryTree.add(8);
        binaryTree.add(2);
        binaryTree.add(5);
        binaryTree.add(12);
        binaryTree.add(1);
        binaryTree.inorderTraversal();
        assertEquals("[1, 2, 5, 8, 12]",binaryTree.inorderList.toString());
    }

    @Test
    public void postOrderTest(){
        BinarySearchTree binaryTree = new BinarySearchTree();
        binaryTree.add(8);
        binaryTree.add(2);
        binaryTree.add(5);
        binaryTree.add(12);
        binaryTree.add(1);
        binaryTree.postOrderTraversal();
        assertEquals("[1, 5, 2, 12, 8]",binaryTree.postOrderList.toString());
    }

    @Test
    public void containsTest(){
        BinarySearchTree binaryTree = new BinarySearchTree();
        binaryTree.add(22);
        assertTrue(binaryTree.contains(22));
        assertFalse(binaryTree.contains(4));
    }

    // Challenge 16

    @Test
    public void findMaxValueTest(){
        BinarySearchTree<Integer> binaryTree1 = new BinarySearchTree<>();
        binaryTree1.setRoot(new BinaryNode<>(1));
        binaryTree1.getRoot().setLeftNode(new BinaryNode<>(2000));
        binaryTree1.getRoot().setRightNode(new BinaryNode<>(800));
        binaryTree1.getRoot().getLeftNode().setLeftNode(new BinaryNode<>(100));
        assertEquals(2000,binaryTree1.findMaxvalue());
        BinarySearchTree<Integer> binaryTree2 = new BinarySearchTree<>();
        assertEquals(0, binaryTree2.findMaxvalue());
    }

    // Challenge 17
    @Test
    public void breadthFirstTest(){
        BinaryTree<Integer> binaryTree1 = new BinaryTree<>();
        binaryTree1.setRoot(new BinaryNode<>(1));
        binaryTree1.getRoot().setLeftNode(new BinaryNode<>(5));
        binaryTree1.getRoot().getLeftNode().setLeftNode(new BinaryNode<>(2));
        binaryTree1.getRoot().getLeftNode().setRightNode(new BinaryNode<>(10));
        binaryTree1.getRoot().setRightNode(new BinaryNode<>(3));
        binaryTree1.getRoot().getRightNode().setLeftNode(new BinaryNode<>(13));
        binaryTree1.getRoot().getRightNode().setRightNode(new BinaryNode<>(11));
        assertEquals("[1, 5, 3, 2, 10, 13, 11]",binaryTree1.breadthFirst(binaryTree1).toString());
        BinaryTree<Integer> binaryTree2 = new BinaryTree<>();
        assertEquals(null, binaryTree2.breadthFirst(binaryTree2));
    }
}
