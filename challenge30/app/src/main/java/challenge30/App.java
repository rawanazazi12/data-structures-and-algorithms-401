/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge30;

import challenge30.binaryTree.BinaryTree;
import challenge30.binaryTree.Node;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        HashTable<String, Integer> studentsGrades = new HashTable<>();
        studentsGrades.add("John", 99);
        studentsGrades.add("Liam", 92);
        studentsGrades.add("Tara", 100);
        studentsGrades.add("Miral", 91);
        studentsGrades.add("Adam", 88);
        studentsGrades.add("Elina", 95);
        studentsGrades.add("Tia", 90);

        System.out.println("The size is => " + studentsGrades.getSize());
        System.out.println(studentsGrades.get("Tara"));
        System.out.println("Remove Miral => " + studentsGrades.remove("Miral"));
        System.out.println("The size is => " + studentsGrades.getSize());
        System.out.println(studentsGrades.contains("Sara"));
        System.out.println(studentsGrades.contains("Liam"));
        System.out.println(studentsGrades.hashCode("Adam"));

        // challenge 31
        HashTable<String , Integer> words = new HashTable<>();
        String data = "In a galaxy far far away";
        System.out.println(words.mostCommonWord(data));


        // challenge 32

        HashTable<Integer,Integer> trees = new HashTable<Integer, Integer>();
        BinaryTree tree1 = new BinaryTree();
        BinaryTree tree2 = new BinaryTree();

        tree1.setRoot(new Node(100));
        tree1.getRoot().setLeft(new Node(150));
        tree1.getRoot().setRight(new Node(200));
        tree1.getRoot().getRight().setLeft(new Node(250));
        tree1.getRoot().getRight().setRight(new Node(300));

        tree2.setRoot(new Node(50));
        tree2.getRoot().setLeft(new Node(100));
        tree2.getRoot().setRight(new Node(400));
        tree2.getRoot().getRight().setLeft(new Node(250));
        tree2.getRoot().getRight().setRight(new Node(300));

        System.out.println(trees.treeIntersection(tree1,tree2));


        // Challenge 33

        HashMap<String, String> firstHashMap = new HashMap<>();
        HashMap<String, String> secondHashMap = new HashMap<>();

        firstHashMap.put("fond", "enamored");
        firstHashMap.put("wrath", "anger");
        firstHashMap.put("diligent", "employed");
        firstHashMap.put("outfit", "garb");
        firstHashMap.put("guide", "usher");

        secondHashMap.put("fond", "averse");
        secondHashMap.put("wrath", "delight");
        secondHashMap.put("diligent", "idle");
        secondHashMap.put("guide", "follow");
        secondHashMap.put("flow", "jam");

        System.out.println(leftJoin(firstHashMap, secondHashMap));




    }

    // "Challenge 33"

    public static List<String> leftJoin(HashMap x, HashMap y){

        List<String> list = new ArrayList<>();
        for(Object key : x.keySet()){
            if(x.containsKey(key)){
                list.add("[ " + key +", "+ x.get(key)+ ", " + y.get(key) +" ]");
            }
        }

        return list;
    }
}
