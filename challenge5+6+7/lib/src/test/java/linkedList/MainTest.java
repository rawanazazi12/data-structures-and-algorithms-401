/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linkedList;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class MainTest {
    @Test void someLibraryMethodReturnsTrue() {
        Main classUnderTest = new Main();
    }
    @Test void isIncludedMethod(){
        LinkedList linkedList =new LinkedList();
        linkedList.insert("m");
        String testValue="m";
        Assertions.assertTrue(linkedList.isIncluded(testValue));
    }

    @Test void isEmpty(){
        LinkedList linkedList=new LinkedList();
        linkedList.insert("g");
        Assertions.assertTrue(linkedList.size>=0);
    }
   @Test void insertMethod(){
        LinkedList linkedList=new LinkedList();
        linkedList.insert("n");
        linkedList.insert("j");
        linkedList.insert("p");
        Assertions.assertEquals(3, linkedList.size);

   }
    @Test
    public void addNewNodeAtEndTest() {
        LinkedList linkedList=new LinkedList();
        linkedList.addNewNodeAtEnd("A");
        linkedList.addNewNodeAtEnd("Z");
        Assertions.assertEquals(2, linkedList.size);
    }
    @Test
    public void addBeforeAndAfterTest() {
        LinkedList linkedList=new LinkedList();
        linkedList.addNewNodeAtEnd("a");
        linkedList.addNewNodeAtEnd("b");
        linkedList.addNewNodeAtEnd("c");
        linkedList.insertBefore("b" , "new");
        linkedList.insertAfter("c" , "new");
        Assertions.assertEquals("a" , linkedList.head.getData());
        Assertions.assertEquals(5, linkedList.size);
        Assertions.assertTrue(linkedList.isIncluded("b") );
        Assertions.assertFalse(linkedList.isIncluded("5") );
        Assertions.assertEquals("{a} => {new} => {b} => {c} => {new} => NULL" , linkedList.toString());
    }
    @Test
    public void insertBeforeFirstNodeTest() {
        LinkedList linkedList=new LinkedList();
        linkedList.addNewNodeAtEnd("a");
        linkedList.addNewNodeAtEnd("b");
        linkedList.addNewNodeAtEnd("c");
        linkedList.insertBefore("a" , "new");
        Assertions.assertEquals("{new} => {a} => {b} => {c} => NULL" , linkedList.toString());

    }
    @Test
    public void insertAfterLastNodeTest() {
        LinkedList linkedList=new LinkedList();
        linkedList.addNewNodeAtEnd("a");
        linkedList.addNewNodeAtEnd("b");
        linkedList.addNewNodeAtEnd("c");
        linkedList.insertAfter("c" , "new");
        Assertions.assertEquals("{a} => {b} => {c} => {new} => NULL" , linkedList.toString());

    }
    @Test
    // test four cases
    public void kthTest(){
        LinkedList linkedList=new LinkedList();
        linkedList.insert("5");
        linkedList.insert("9");
        linkedList.insert("3");
        linkedList.insert("7");
        Assertions.assertEquals(4, linkedList.size);
        Assertions.assertEquals("9",linkedList.kthFromEnd(2));
        Assertions.assertEquals( "k value out of boundaries",linkedList.kthFromEnd(8));
        Assertions.assertEquals( "k value out of boundaries",linkedList.kthFromEnd(4));
        Assertions.assertEquals( "k value out of boundaries",linkedList.kthFromEnd(-5));
        Assertions.assertEquals( "9",linkedList.kthFromEnd(2));


    }
    @Test
    // the case when linked list size =1
    public void kthTestWithSizeOne(){
        LinkedList linkedList=new LinkedList();
        linkedList.insert("5");
        Assertions.assertEquals( "The Linked List size is 1",linkedList.kthFromEnd(4));

    }

    // challenge08 Tests
    @Test
     // first case test
    public void zipListsMethodTest1(){
        LinkedList linkedList=new LinkedList();
        LinkedList list1 =new LinkedList();
        LinkedList list2=new LinkedList();
        list1.insert("1");
        list1.insert("3");
        list1.insert("2");
        list2.insert("5");
        list2.insert("9");
        Assertions.assertEquals( "{1} => {5} => {3} => {9} => {2} => NULL", linkedList.zipLists(list1,list2).toString());
    }
    @Test
    // second case test
    public void zipListsMethodTest2(){
        LinkedList linkedList=new LinkedList();
        LinkedList list1 =new LinkedList();
        LinkedList list2=new LinkedList();
        list1.insert("1");
        list1.insert("3");
        list1.insert("2");
        list2.insert("5");
        list2.insert("9");
        list2.insert("4");
        Assertions.assertEquals( "{1} => {5} => {3} => {9} => {2} => {4} => NULL", linkedList.zipLists(list1,list2).toString());
    }
    @Test
    // third case test
    public void zipListsMethodTest3(){
        LinkedList linkedList=new LinkedList();
        LinkedList list1 =new LinkedList();
        LinkedList list2=new LinkedList();
        list1.insert("1");
        list1.insert("3");
        list2.insert("5");
        list2.insert("9");
        list2.insert("4");
        Assertions.assertEquals( "{1} => {5} => {3} => {9} => {4} => NULL", linkedList.zipLists(list1,list2).toString());
    }

     // test when two lists are empty
    @Test
    // fourth case test
    public void zipListsMethodTest4(){
        LinkedList linkedList=new LinkedList();
        LinkedList list1 =new LinkedList();
        LinkedList list2=new LinkedList();
//        list1.insert("1");
//        list1.insert("3");
//        list2.insert("5");

        Assertions.assertEquals( "NULL", linkedList.zipLists(list1,list2).toString(), "The two lists are empty and the merged list is null");
    }
    @Test
    // fifth case test
    // the first list is empty
    public void zipListsMethodTest5(){
        LinkedList linkedList=new LinkedList();
        LinkedList list1 =new LinkedList();
        LinkedList list2=new LinkedList();
//        list1.insert("1");
//        list1.insert("3");
        list2.insert("5");
        list2.insert("9");
        list2.insert("4");
        Assertions.assertEquals( "{5} => {9} => {4} => NULL", linkedList.zipLists(list1,list2).toString());
    }
    @Test
    // sixth case test
    // the second list is empty
    public void zipListsMethodTest6(){
        LinkedList linkedList=new LinkedList();
        LinkedList list1 =new LinkedList();
        LinkedList list2=new LinkedList();
        list1.insert("1");
        list1.insert("3");
        list1.insert("2");
//        list2.insert("5");
//        list2.insert("9");
//        list2.insert("4");
        Assertions.assertEquals( "{1} => {3} => {2} => NULL", linkedList.zipLists(list1,list2).toString());
    }

    }
